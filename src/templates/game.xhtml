<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html 
      PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
      "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" 
      xmlns:svg="http://www.w3.org/2000/svg"
      xmlns:xlink="http://www.w3.org/1999/xlink"> 
<head>
<link type="text/css" rel="stylesheet" href="/static/game.css"></link>
<link type="text/css" rel="stylesheet" href="/static/reset.css" />
<link type="text/css" rel="stylesheet" href="/static/picture.css" />
<!-- <script type="text/javascript" src="/static/json.js"></script> -->
<!-- <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.5/jquery.min.js" type="text/javascript"></script> -->
<script src="/static/jquery-1.3.2.min.js" type="text/javascript"></script> 
<script type="text/javascript" src="/static/event.js"></script>
<script type="text/javascript" src="/static/player.jq.js"></script>
<script type="text/javascript" src="/static/board.js"></script>
<script type="text/javascript" src="/_ah/channel/jsapi"></script>
<script type="text/javascript">//<![CDATA[

function getCookie(name) {
    var r = document.cookie.match("\\b" + name + "=([^;]*)\\b");
    return r ? r[1] : undefined;
}

jQuery.postJSON = function(url, args, callback) {
    args._xsrf = getCookie("_xsrf");
    $.ajax({url: url, data: $.param(args), dataType: "text", type: "POST",
            success: function(response) {
        if (callback) callback(eval("(" + response + ")"));
    }, error: function(response) {
        console.log("ERROR:", response)
    }});
};

function getBoard(board) {
    jQuery.getJSON("/game/{{gamekey}}/currentBoard", function(data) {
        board.loadJSON(data);
        svg = document.getElementById("board");
        while(svg.firstChild) svg.removeChild(svg.firstChild);
        board.renderBoard(svg);
    });
}

function loadBoard() {
    
    var channel = new goog.appengine.Channel('{{ token}}');
    var socket = channel.open();
    var connected = false;
             
    var board = new Board();
    
    
    board.setModelElement("settlement", document.getElementById("settlement-model"), {x:15, y:15});
    board.setModelElement("city", document.getElementById("city-model"), {x:25, y:15});
    
    
    socket.onopen = function() {
        connected = true;
        getBoard(board);
    };
    socket.onmessage = function(msg) {
        message = JSON.parse(msg.data);
        //TODO: get real json to work
        //message = eval(msg);
        switch(message["action"]) {
        case "reset":
            getBoard(board);
            break;
        case "placeSettlement":
            board.placeSettlement(message["data"]["x"], message["data"]["y"], message["color"]);
            break;
        case "placeCity":
            board.placeCity(message["data"]["x"], message["data"]["y"], message["color"]);
            break;
        case "placeRoad":
            board.placeRoad(message["data"]["x1"], message["data"]["y1"], message["data"]["x2"], message["data"]["y2"], message["color"]);
            break;
        case "playerJoinGame":
            throw "Message not yet implemented";
        case "playerLeaveGame":
            throw "Message not yet implemented";
        case "playerStartFirstTurn":
            throw "Message not yet implemented";
        case "playerBuildFirstSettlement":
            throw "Message not yet implemented";
        case "playerBuildFirstRoad":
            throw "Message not yet implemented";
        case "playerStartSecondTurn":
            throw "Message not yet implemented";
        case "playerBuildSecondSettlement":
            throw "Message not yet implemented";
        case "playerBuildSecondRoad":
            throw "Message not yet implemented";
        case "playerStartNormalTurn":
            throw "Message not yet implemented";
        }
        
        populateActions(message["availableActions"], board);
        
    }
    socket.onerror = function() {}
    socket.onclose = function() {
        connected = false;
        console.log("disconnected.");
    };

    /*
	var highlightVerts = document.getElementById("highlightVerts");

	toggleHighlight = true;
	highlightVerts.onclick = function() {
		if(toggleHighlight)	board.highlightBuildableVertex("player-{{color}}");
		else board.clearHighlights();

		toggleHighlight = !toggleHighlight;
	};

	var highlightEdges = document.getElementById("highlightEdges");

	toggleHighlightEdges = true;
	highlightEdges.onclick = function() {
		if(toggleHighlightEdges)	board.highlightBuildableEdge("player-{{color}}");
		else board.clearHighlights();

		toggleHighlightEdges = !toggleHighlightEdges;
	};
	*/

    Event.addListener(board, "hexclick", function(hex) { alert("hexclick: " + hex.hexType_); });
	/*
	Event.addListener(board, "vertexclick", function(vertex) {
        var action = "placeSettlement";
        console.log("vertex.vertexDevelopments_.length: " +vertex.vertexDevelopments_.length)
        if(vertex.vertexDevelopments_.length > 0 && vertex.vertexDevelopments_[0].model == "settlement") action = "placeCity";
        
        console.log("action: " + action);
                                                                
        jQuery.postJSON("/game/{{gamekey}}/action", {action:action, data:"{\"x\":"+vertex.position_.x+",\"y\":"+vertex.position_.y+"}"}, function(ret){
            //alert(ret);
        });
    });
	Event.addListener(board, "edgeclick", function(edge) {
        var action = "placeRoad";
        
        if(edge.edgeDevelopments_.length == 0) {
            jQuery.postJSON("/game/{{gamekey}}/action", {action:action, data:'{"x1":'+edge.first_.x+',"y1":'+edge.first_.y+',"x2":'+edge.second_.x+',"y2":'+edge.second_.y+"}"}, function(ret) {
                //alert(ret)
            });
        }
    });
	*/
    
    
    return board;
}

function joingame() {
    document.location = "join";
}

function handleLoad() {
	var player1 = new Player();
	jQuery.getJSON("/game/{{gamekey}}/currentPlayer", function(data) {
		if(! data || data["error"]) return;
        player1.loadJSON(data);
		player1.isLocal_ = true;
		var playerView1 = new PlayerView(player1);
    	playerView1.render(document.getElementById("player1"));
    });
	
    loadBoard()  
    
    
}

function updatePlayer() {
    player1.score_ = Math.floor(Math.random() * 9 + 1);
    player1.loadPlayer();
}

function reserve() {
	var reserveEmail = $('#reserveEmail').val();
	jQuery.postJSON("{{reservationUrl}}", {reservedFor:reserveEmail}, function(data, xhr) {
		if(data && data.reserved)
			$('#reserveMessage').text("Sent Invitation.");
		else
			$('#reserveMessage').text("Invitation Failed to Send.");
	});
}

function sendAction(action, data) {
	var responder = new Object();
	
	jQuery.postJSON("/game/{{gamekey}}/action", {action:action, data:data}, function(ret) {
        Event.fire(responder, "load", arguments);
    });
	
	return responder;
}

function beginBuildSettlement(board) {
	board.highlightBuildableVertex("player-{{color}}");
	$("#disableAction").show();
	$("#actions").hide();
	
	handleVertexClickId = Event.addListener(board, "vertexclick", function(vertex) {
		console.log("vertex click");
		var responder = sendAction("placeSettlement", "{\"x\":"+vertex.position_.x+",\"y\":"+vertex.position_.y+"}");
		Event.addListener(responder, "load", function(ret) {
			if(!ret) alert("You cannot place a settlement there.");
			
			Event.removeListenerById(board, "vertexclick", handleVertexClickId);
		});
		board.clearHighlights();
		$("#disableAction").hide();
		$("#actions").show();
	});
		
	$("#disableAction a").bind("click", function() {
		Event.removeListenerById(board, "vertexclick", handleVertexClickId);
		board.clearHighlights();
		$("#disableAction").hide();
		$("#actions").show();
		$("#disableAction a").unbind("click");
	});
}


function beginBuildRoad(board) {
	board.highlightBuildableEdge("player-{{color}}");
	$("#disableAction").show();
	$("#actions").hide();
	
	clickId = Event.addListener(board, "edgeclick", function(edge) {
		console.log("edge click");
		var responder = sendAction("placeRoad", '{"x1":'+edge.first_.x+',"y1":'+edge.first_.y+',"x2":'+edge.second_.x+',"y2":'+edge.second_.y+"}");
		Event.addListener(responder, "load", function(ret) {
			if(!ret) alert("You cannot place a road there.");
			
			Event.removeListenerById(board, "edgeclick", clickId);
		});
		board.clearHighlights();
		$("#disableAction").hide();
		$("#actions").show();
	});
		
	$("#disableAction a").bind("click", function() {
		Event.removeListenerById(board, "edgeclick", clickId);
		board.clearHighlights();
		$("#disableAction").hide();
		$("#actions").show();
		$("#disableAction a").unbind("click");
	});
	
}

function populateActions(availableActions, board) {
	$("#actions").empty();
	if(!availableActions) return;
	
	for(var i = 0; i < availableActions.length; i++) {
		var a = availableActions[i];
		
		var act = $("<a href='javascript:void(0)'/>");
		var li = $("<li/>");
		
		switch(a) {
		case "startGame":
			act.append("<span>Start Game</span>");
			act.click(function() {
				var responder = sendAction("startGame", null);
				Event.addListener(responder, "load", function(data){
					alert(data);
				});
			});
			break;
		case "placeSettlement":
			act.append("<span>Build Settlement</span>");
			act.click(function() { beginBuildSettlement(board); });
			break;
		case "placeRoad":
			act.append("<span>Build Road</span>");
			act.click(function() { beginBuildRoad(board); });
			break;
		case "quit":
			act.append("<span>Quit</span>");
			break;
		default:
			act.append("<span>"+a+"</span>")
			act.click(function() {
				var responder = sendAction(a, null);
				Event.addListener(responder, "load", function(data){
					alert(data);
				});
			});
		}
		
		li.append(act)
		$("#actions").append(li);
	}
}


//]]></script>
</head>

<body onload="handleLoad()">

    <div id="toolbar">
        <a href="/">Back to Game List</a> | 
        {% ifequal color None %}
            <a id="boardReset" href="javascript:void(0)" onclick="joingame()">Join Game</a>
        {% else %}
        You are: <div class="player-{{ color }}" style="width:10px; height:10px; display:inline-block;"></div> {{ nick }} 
        {% endifequal %}
        
        {% if isOwner %}
        	<input id="reserveEmail" type="text" /> <a href="javascript:void(0)" onclick="reserve()">Reserve</a> <span id="reserveMessage"></span>
        {% endif %}
    </div>

    <div id="game-board">

<ul id="actions">
</ul>
<ul id="disableAction">
	<li><a href="javascript:void(0)">Cancel</a></li>
</ul>


<!--
<object id="AdobeSVG" classid="clsid:78156a80-c6a1-4bbf-8e6a-3cd390eeb4e2"> </object>
<?import namespace="svg" urn="http://www.w3.org/2000/svg" implementation="#AdobeSVG"?>
-->


<svg xmlns="http://www.w3.org/2000/svg" version="1.1" baseProfile="full" width="100%" height="1024px">
    <g id="board"></g>
    <g id="prototypes" style="visibility:hidden;">
        <svg id="settlement-model" y="331.41016151377545" x="635">
            <g>
                <rect  width="30" height="30"
                       style="stroke: black;"/>
                <line x1="15" y1="0" x2="15" y2="30" style="stroke:black;" />
            </g>

        </svg>
        <svg id="city-model" x="325" y="158.20508075688772">
            <g>
                <rect  x="0" y="0" width="50" height="30"
                       style="stroke: black;"/>
                <line x1="15" y1="0" x2="15" y2="30" style="stroke:black;" />
                <line x1="30" y1="0" x2="30" y2="30" style="stroke:black;" />
            </g>
        </svg>
    </g>

</svg>
</div> <!-- game-board -->

<div id="pp">
    <div id="pp-bg"></div>
    <div id="player-panel2">

        <div style="border-top:3px;border-bottom:3px;">
            <span id="photoCell" class="smallPhoto" style="vertical-align:middle;display:table-cell;">
              <img id="photo" src="{{imageUrl}}" alt="A picture of you"/>
            </span><span id="pp-name" style="vertical-align:middle;display:table-cell;">Player Name</span>
        </div>

        <h3>Resources</h3>
        <div id="pp-resources">
            <div class="pp-res">
                <div id="pp-res-card-sheep" class="card" title="Sheep"><div class="sheep"></div></div>
                <div id="pp-res-sheep">0</div>
            </div>
            <div class="pp-res">
                <div id="pp-res-card-wheat" class="card" title="Wheat"><div class="wheat"></div></div>
                <div id="pp-res-wheat">0</div>
            </div>
            <div class="pp-res">
                <div id="pp-res-card-wood" class="card" title="Wood"><div class="wood"></div></div>
                <div id="pp-res-wood">0</div>
            </div>
            <div class="pp-res">
                <div id="pp-res-card-rock" class="card" title="Ore"><div class="rock"></div></div>
                <div id="pp-res-rock">0</div>
            </div>
            <div class="pp-res">
                <div id="pp-res-card-clay" class="card" title="Clay"><div class="clay"></div></div>
                <div id="pp-res-clay">0</div>
            </div>
        </div>
        <h3>Bonuses</h3>
        <div id="pp-bonuses">

        </div>
    </div>
</div>

<div id="player-panel">
        <div id="player1"></div>
    
    <a href="javascript:void(0);" onclick="updatePlayer()">Update Player</a>
</div> <!-- player-panel -->

<div class="clear"></div>
<div id="footer">
    footer
</div>
</body>

</html>
