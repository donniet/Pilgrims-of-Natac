<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html 
      PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
      "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" 
      xmlns:svg="http://www.w3.org/2000/svg"
      xmlns:xlink="http://www.w3.org/1999/xlink"> 
<head>
<link type="text/css" rel="stylesheet" href="/static/game.css"></link>
<link type="text/css" rel="stylesheet" href="/static/reset.css" />
<link type="text/css" rel="stylesheet" href="/static/picture.css" />
<!-- <script type="text/javascript" src="/static/json.js"></script> -->
<!-- <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.5/jquery.min.js" type="text/javascript"></script> -->
<script type="text/javascript" src="/static/lib/jquery-1.6.min.js"></script> 
<script type="text/javascript" src="/static/lib/jquery-ext.js"></script>
<script type="text/javascript" src="/_ah/channel/jsapi"></script>
<script type="text/javascript" src="/static/lib/event.js"></script>
<script type="text/javascript" src="/static/model/player.js"></script>
<script type="text/javascript" src="/static/model/board.js"></script>
<script type="text/javascript" src="/static/model/trade.js"></script>
<script type="text/javascript" src="/static/view/boardView.js"></script>
<script type="text/javascript" src="/static/view/actionsView.js"></script>
<script type="text/javascript" src="/static/view/diceView.js"></script>
<script type="text/javascript" src="/static/view/playerListView.js"></script>
<script type="text/javascript" src="/static/view/errorView.js"></script>
<script type="text/javascript" src="/static/view/playerView.js"></script>
<script type="text/javascript" src="/static/view/layout.js"></script>
<script type="text/javascript" src="/static/chat.js"></script>
<script type="text/javascript">//<![CDATA[

function getCookie(name) {
    var r = document.cookie.match("\\b" + name + "=([^;]*)\\b");
    return r ? r[1] : undefined;
}

function ResourcesView(element) {
	this.el_ = element;
	this.resources_ = null;
	this.player_ = null;
}
ResourcesView.prototype.setPlayer = function(player) {
	this.player_ = player;
	
	var self = this;
	Event.addListener(this.player_, "load", function() { self.renderPlayer(); });
}
ResourcesView.prototype.setResourceArray = function(resourceArray) {
	this.resources_ = resourceArray;
	this.render();
}
ResourcesView.prototype.renderPlayer = function() {	
	this.resources_ = this.player_.getResources();
	this.render();
}
ResourcesView.prototype.render = function(resources) {	
	this.el_.empty();
	var self = this;
	
	var ul = $("<ul/>");
	ul.addClass("resource-view");
	for(var i = 0; i < this.resources_.length; i++) {
		var r = this.resources_[i];
		for(var j = 0; j < r.amount; j++) {
			var li = $("<li/>");
			var resource = $("<span/>");
			li.click(function(r) { 
				return function() { 
					Event.fire(self, "resourceclick", [r]); 
				}	
			}(r.resource));
			resource.addClass("resource-view-" + r.resource);
			var textSpan = $("<span/>");
			textSpan.text(r.resource);
			resource.append(textSpan);
			li.append(resource);
			ul.append(li);
		}
	}
	this.el_.append(ul);
}

function TradeView(element) {
	this.el_ = element;
	this.board_ = null;
	this.myOffer_ = new Array();
	
	this.resourcesDiv_ = null;
	this.potDiv_ = null;
	this.bankDiv_ = null;
}
TradeView.prototype.setBoard = function(board) {
	this.board_ = board;
	var trade = this.board_.getTrade();
	
	var self = this;
	
	//Event.addListener(this.board_.getCurrentPlayer(), "load", this.renderPlayerResources, this);
	Event.addListener(trade, "load", this.renderPot, this);
	
	this.render();
}
TradeView.prototype.render = function() {
	this.el_.empty();

	this.resourcesDiv_ = $("<div class='trade-view-resources'/>");
	this.el_.append(this.resourcesDiv_);
	

	this.potDiv_ =  $("<div class='trade-view-players'/>");
	this.el_.append(this.potDiv_);
	
	this.bankDiv_ = $("<div class='trade-view-bank-resources'/>");
	this.el_.append(this.bankDiv_);
}
TradeView.prototype.renderPlayerResources = function() {
	var currentPlayer = this.board_.getCurrentPlayer();
	var adjustedResources = new Array();
	var playerResources = currentPlayer.getResources();
	
	for(var i = 0; i < playerResources.length; i++) {
		var pr = playerResources[i];
		adjustedResources.push({"resource":pr.resource, "amount":pr.amount});
	}
	
	for(var i = 0; i < this.myOffer_.length; i++) {
		var my = this.myOffer_[i];
		for(j = 0; j < adjustedResources.length; j++) {
			var ar = adjustedResources[j];
			if(ar.resource == my.resource) {
				ar.amount -= my.amount;
				break;
			}
		}
	}
	
	var resourcesView = new ResourcesView(this.resourcesDiv_);
	resourcesView.setResourceArray(adjustedResources);
	Event.addListener(resourcesView, "resourceclick", this.handleResourceClick, this);
}
TradeView.prototype.renderBank = function() {
	var resources = this.board_.getResources();
	var ras = new Array();
	for(var i = 0; i < resources.length; i++) {
		ras.push({"resource":resources[i], "amount":1});
	}
	
	var resourcesView = new ResourcesView(this.bankDiv_);
	resourcesView.setResourceArray(ras);
	Event.addListener(resourcesView, "resourceclick", this.handleBankResourceClick, this);
}

TradeView.prototype.renderPot = function() {
	this.renderPlayerResources();
	
	var players = this.board_.getPlayers();
	var trade = this.board_.getTrade();
	var currentPlayer = this.board_.getCurrentPlayer();
	var currentColor = currentPlayer.getColorName();
	
	this.potDiv_.empty();
	
	var ul = $("<ul/>");
	
	var offers = null;
	if(trade) offers = trade.getOffers();
	
	if(!trade.isTrading_) {
		this.myOffer_ = new Array();
	}
	
	for(var i = 0; players && i < players.length; i++) {
		var p = players[i];
		var li = $("<li/>");
		var span = $("<span class='list-player-image'></span>");
		var img = $("<img/>");
		img.attr("width", 44);
		img.attr("height", 44);
		
		img.attr("src", p.image_);
		span.append(img);
		li.append(span);
		
		span = $("<span/>");
		
		var o = offers ? offers[p.getColorName()] : null;
		if(o) {
			var rv = new ResourcesView(span);
			rv.setResourceArray(o);
			
			// if this is the current player
			if(currentColor == p.getColorName()) {
				this.myOffer_ = o;
				Event.addListener(rv, "resourceclick", this.handleResourceRemove, this);
			}
			
			// if no offer has been accepted (or confirmed) put accept markers next to other players offers
			if(trade.getState() == "initial" && trade.getColorFrom() == currentColor && trade.getColorFrom() != p.getColorName()) {
				var accept = $("<a href='javascript:void(0)' class='trade-accept-offer'><span>Accept</span></a>");
				
				var self = this;
				accept.click(function(color) { 
					return function() { self.handleOfferAccept(color); } 
				}(p.getColorName()));
				
				li.append(accept);
			}
			
			if(trade.getState() == "accepted" && trade.getColorTo() == currentColor && trade.getColorFrom() == p.getColorName()) {
				var confirm = $("<a href='javascript:void(0)' class='trade-confirm-offer'><span>Confirm</span></a>");
				
				var self = this;
				confirm.click(function() { self.handleOfferConfirm(); });
				
				li.append(confirm);
			}
			
		}
		li.append(span)
		ul.append(li);
	}
	
	var li = $("<li/>");
	var span = $("<span class='bank-offer-image'/>");
	var img = $("<img/>");
	img.attr("width",44);
	img.attr("height",44);
	img.attr("src", "/static/i/dollar.jpg");
	span.append(img);
	li.append(span);
	
	span = $("<span/>");
	var bankOffer = trade.getBankOffer();
	
	var rv = new ResourcesView(span);
	rv.setResourceArray(bankOffer);
		
	if(trade.getColorFrom() == p.getColorName()) {
		var confirm = $("<a href='javascript:void(0)' class='trade-confirm-offer'><span>Confirm</span></a>");
		
		var self = this;
		confirm.click(function() { self.handleBankOfferConfirm(); });
		
		li.append(confirm);
	}
	li.append(span);
	ul.append(li);
		
	this.potDiv_.append(ul);
	
	this.renderBank();
}
TradeView.prototype.handleOfferAccept = function(colorTo) {
	Event.fire(this, "acceptoffer", [colorTo]);
}
TradeView.prototype.handleOfferConfirm = function() {
	Event.fire(this, "confirmoffer", []);
}
TradeView.prototype.handleBankOfferConfirm = function() {
	Event.fire(this, "confirmbankoffer", []);
}
TradeView.prototype.handleResourceRemove = function(resource) {
	var i = 0;
	for(; i < this.myOffer_.length; i++){
		var ra = this.myOffer_[i];
		if(ra.resource == resource && ra.amount > 0) {
			ra.amount--;
			break;
		}
	}
	
	if(i < this.myOffer_.length)
		Event.fire(this, "changeoffer", [this.myOffer_]);
}

TradeView.prototype.handleResourceClick = function(resource) {
	console.log("resource clicked: " + resource);
	if(!this.myOffer_) this.myOffer_ = new Array();
	var i = 0;
	for(; i < this.myOffer_.length; i++){
		var ra = this.myOffer_[i];
		if(ra.resource == resource) {
			ra.amount++;
			break;
		}
	}
	if(i >= this.myOffer_.length)
		this.myOffer_.push({"resource":resource, "amount":1});
	
	Event.fire(this, "changeoffer", [this.myOffer_]);
	
}
TradeView.prototype.handleBankResourceClick = function(resource) {
	console.log("bank resource clicked: " + resource);

	var trade = this.board_.getTrade();
	var bankOffer = trade.getBankOffer();
	
	var i = 0; 
	for(; i < bankOffer.length; i++) {
		var ra = bankOffer[i];
		if(ra.resource == resource) {
			ra.amount++;
			break;
		}
	}
	if(i >= bankOffer.length) {
		bankOffer.push({"resource":resource, "amount":1});
	}
	
	Event.fire(this, "changebankoffer", [bankOffer]);	
}

function handleLoad() {
	var board = new Board("{{token}}", {
		"board-json-url": "{{boardUrl}}",
		"player-json-url": "{{playerUrl}}",
		"action-json-url": "{{actionUrl}}",
		"reservation-json-url": "{{reservationUrl}}",
		"trade-json-url":"{{tradeUrl}}"
	});
	
	var layout = new Layout();
	
	var boardView = new BoardView(document.getElementById("board"), [
   	    {type: "settlement", element:document.getElementById("settlement-model"), center:{x:15,y:15}},
   	    {type: "city", 		 element:document.getElementById("city-model"), 	  center:{x:25,y:15}}
   	]);
	boardView.setBoard(board);
	

	var diceView = new DiceView($("#diceView"));
	diceView.setBoard(board);
	
	var playerListView = new PlayerListView($("#players"));
	playerListView.setBoard(board);

	var chatview = new ChatView($("#chat"));
	chatview.setBoard(board);
	
	layout.addItem($("#toolbar"), "top", 30);
	
	{% ifnotequal color None %}
	var actionsView = new ActionsView($("#actions"));
	actionsView.setBoard(board);
	actionsView.setBoardView(boardView);
	
	Event.addListener(actionsView, "completeaction", function(action, data) {
		board.sendAction(action, data);
	});
	
	var errorView = new ErrorView($("#errorMessage"));
	errorView.setBoard(board);
	
	var playerView1 = new PlayerView($("#pp"));
	playerView1.setBoard(board);
	
	var resourcesView = new ResourcesView($("#pp-resources"));
	resourcesView.setPlayer(board.getCurrentPlayer());
	
	
	var tradeView = new TradeView($("#trade-inner"));
	tradeView.setBoard(board);
	
	Event.addListener(tradeView, "changeoffer", function(offer) {
		var offerDict = new Object();
		for(var i = 0; offer && i < offer.length; i++) {
			var o = offer[i];
			offerDict[o.resource] = o.amount;
		}
		console.log("offerDict: " + offerDict);
		console.log("json(offerDict): " + JSON.stringify(offerDict));
		board.sendAction("changeTradeOffer", JSON.stringify(offerDict));
	});
	Event.addListener(tradeView, "changebankoffer", function(offer) {
		var offerDict = new Object();
		for(var i = 0; offer && i < offer.length; i++) {
			var o = offer[i];
			offerDict[o.resource] = o.amount;
		}
		console.log("offerDict: " + offerDict);
		console.log("json(offerDict): " + JSON.stringify(offerDict));
		board.sendAction("changeBankOffer", JSON.stringify(offerDict));
	});

	Event.addListener(tradeView, "acceptoffer", function(colorTo) {
		board.sendAction("acceptTradeOffer", colorTo);
	});

	Event.addListener(tradeView, "confirmoffer", function() {
		board.sendAction("confirmTradeOffer", null);
	});
	Event.addListener(tradeView, "confirmbankoffer", function() {
		board.sendAction("confirmBankOffer", null);
	});
		
	layout.addItem($("#trade"), "left", 100, true);	
	
    {% endifnotequal %}
    
    layout.addItem($("#pp"), "right", 350, true);
	layout.addItem($("#chat"), "bottom", 200, true, true);
	
    layout.addItem(document.getElementById("game-board"), "center");
	
	board.load();
			    
    $("#reserveLink").click(function() {
    	var responder = board.reserve( $('#reserveEmail').val());
    	Event.addListener(responder, "reserved", function() {
    		$('#reserveMessage').text("Sent Invitation.");
    		$('#reserveEmail').val("");
    	});
    	Event.addListener(responder, "error", function() {
    		$('#reserveMessage').text("Invitation Failed to Send.");
    	});		
    });  
}


$(document).ready(handleLoad);

//]]></script>
</head>

<body>

    <div id="toolbar">
        <a href="/">Back to Game List</a>
        
        {% if isOwner %}
        	<input id="reserveEmail" type="text" /> <a href="javascript:void(0)" id="reserveLink">Reserve</a> <span id="reserveMessage"></span>
        {% endif %}
        
        <span id="current-player">
        {% ifequal color None %}
            <a href="{{joinUrl}}"><span>Join Game</span></a>
        {% else %}
        You are: <div class="player-{{ color }}" style="width:10px; height:10px; display:inline-block;"></div> {{ nick }} 
        {% endifequal %}
        </span> 
        
        <span id="errorMessage"></span>
    </div>

    <div id="game-board">
    
		<!--
		<object id="AdobeSVG" classid="clsid:78156a80-c6a1-4bbf-8e6a-3cd390eeb4e2"> </object>
		<?import namespace="svg" urn="http://www.w3.org/2000/svg" implementation="#AdobeSVG"?>
		-->
		
		
		<svg xmlns="http://www.w3.org/2000/svg" version="1.1" baseProfile="full" width="100%" height="100%" id="svg">
		    <g id="board"></g>
		    <g id="prototypes" style="visibility:hidden;">
		        <svg id="settlement-model" y="331.41016151377545" x="635">
		            <g>
		                <rect  width="30" height="30"
		                       style="stroke: black;"/>
		                <line x1="15" y1="0" x2="15" y2="30" style="stroke:black;" />
		            </g>
		
		        </svg>
		        <svg id="city-model" x="325" y="158.20508075688772">
		            <g>
		                <rect  x="0" y="0" width="50" height="30"
		                       style="stroke: black;"/>
		                <line x1="15" y1="0" x2="15" y2="30" style="stroke:black;" />
		                <line x1="30" y1="0" x2="30" y2="30" style="stroke:black;" />
		            </g>
		        </svg>
		    </g>
		    
		   
		
		</svg>
</div> <!-- game-board -->


<div id="pp">

     {% ifnotequal color None %}
     <h3>Resources</h3>
     <div id="pp-resources">
    
     </div>
     
     <h3>Bonuses</h3>
     <div id="pp-bonuses"></div>
     
     <h3>Developments</h3>
     <div id="pp-developments"></div>
     
     <h3>Actions</h3>
	<div id="actions"></div>
	
	{% endifnotequal %}
	<h3 id="diceView"></h3>
	
	<h3>Players</h3>
	<div id="players"></div>
</div>

<div id="chat"></div>

<div id="trade">
<h3>Trade</h3>
<div id="trade-inner"></div>
</div>

</body>

</html>
